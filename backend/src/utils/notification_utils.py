import requests
import json
from src.models import User

# URL email —Å–µ—Ä–≤–∏—Å–∞
EMAIL_SERVICE_URL = "http://localhost:3001"

def send_new_assignment_notification(assignment, students=None):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    """
    try:
        # –ï—Å–ª–∏ —Å—Ç—É–¥–µ–Ω—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
        if students is None:
            students = User.query.filter_by(role='student').all()
        
        success_count = 0
        for student in students:
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
                notification_data = {
                    'studentEmail': student.email,
                    'studentName': f"{student.first_name} {student.last_name}",
                    'assignmentTitle': assignment.title,
                    'assignmentDescription': assignment.description,
                    'teacherName': f"{assignment.topic.teacher.first_name} {assignment.topic.teacher.last_name}",
                    'dueDate': assignment.due_date.isoformat() if assignment.due_date else None,
                    'maxScore': assignment.max_score
                }
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ email —Å–µ—Ä–≤–∏—Å—É
                response = requests.post(
                    f"{EMAIL_SERVICE_URL}/send-new-assignment",
                    json=notification_data,
                    timeout=10
                )
                
                if response.status_code == 200:
                    success_count += 1
                    print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞–Ω–∏–∏ '{assignment.title}' –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {student.email}")
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {student.email}: {response.text}")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ç—É–¥–µ–Ω—Ç—É {student.email}: {str(e)}")
                
        print(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {success_count}/{len(students)}")
        return success_count > 0
        
    except Exception as e:
        print(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–¥–∞–Ω–∏–∏: {str(e)}")
        return False


def send_grade_notification(submission):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É –æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        notification_data = {
            'studentEmail': submission.student.email,
            'studentName': f"{submission.student.first_name} {submission.student.last_name}",
            'assignmentTitle': submission.assignment.title,
            'score': submission.score,
            'maxScore': submission.assignment.max_score,
            'feedback': submission.feedback,
            'teacherName': f"{submission.assignment.topic.teacher.first_name} {submission.assignment.topic.teacher.last_name}"
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ email —Å–µ—Ä–≤–∏—Å—É
        response = requests.post(
            f"{EMAIL_SERVICE_URL}/send-grade-notification",
            json=notification_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Ü–µ–Ω–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {submission.student.email}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–µ: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ü–µ–Ω–∫–µ: {str(e)}")
        return False


def send_sms_verification_code(user):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å SMS-–∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        verification_data = {
            'email': user.email,
            'firstName': user.first_name,
            'lastName': user.last_name
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ email —Å–µ—Ä–≤–∏—Å—É
        response = requests.post(
            f"{EMAIL_SERVICE_URL}/send-verification",
            json=verification_data,
            timeout=10
        )
        
        if response.status_code == 200:
            response_data = response.json()
            print(f"‚úÖ SMS-–∫–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {user.email}")
            return {
                'success': True,
                'verification_code': response_data.get('verificationCode'),
                'message_id': response_data.get('messageId')
            }
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS-–∫–æ–¥–∞: {response.text}")
            return {'success': False, 'error': response.text}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS-–∫–æ–¥–∞: {str(e)}")
        return {'success': False, 'error': str(e)}


def send_password_reset_notification(user, reset_token):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–∞—Ä–æ–ª—è
    """
    try:
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        reset_data = {
            'email': user.email,
            'firstName': user.first_name,
            'resetToken': reset_token
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ email —Å–µ—Ä–≤–∏—Å—É
        response = requests.post(
            f"{EMAIL_SERVICE_URL}/send-password-reset",
            json=reset_data,
            timeout=10
        )
        
        if response.status_code == 200:
            print(f"‚úÖ –ü–∏—Å—å–º–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user.email}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}")
        return False


def check_email_service_health():
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å email —Å–µ—Ä–≤–∏—Å–∞
    """
    try:
        response = requests.get(f"{EMAIL_SERVICE_URL}/health", timeout=5)
        return response.status_code == 200
    except:
        return False