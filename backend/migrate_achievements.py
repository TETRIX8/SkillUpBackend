#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
"""

import os
import sys
sys.path.insert(0, os.path.dirname(__file__))

from src.main import app
from src.models import db
from src.models.achievement import Achievement, UserStats
from src.models.user import User

def migrate_achievements():
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π"""
    with app.app_context():
        print("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        print("üìã –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π...")
        db.create_all()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Å–æ–∑–¥–∞–µ–º –¥–ª—è –Ω–∏—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("üë• –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        users = User.query.all()
        
        for user in users:
            # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_stats = UserStats.query.filter_by(user_id=user.id).first()
            if not existing_stats:
                stats = UserStats(user_id=user.id)
                db.session.add(stats)
                print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")
            
            # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from src.services.achievement_service import AchievementService
            
            for achievement_type in AchievementService.ACHIEVEMENTS.keys():
                existing_achievement = Achievement.query.filter_by(
                    user_id=user.id,
                    achievement_type=achievement_type
                ).first()
                
                if not existing_achievement:
                    achievement = Achievement(
                        user_id=user.id,
                        achievement_type=achievement_type,
                        current_progress=0,
                        is_completed=False
                    )
                    db.session.add(achievement)
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ {achievement_type} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.email}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        try:
            db.session.commit()
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print(f"üìä –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {UserStats.query.count()}")
            print(f"üèÜ –°–æ–∑–¥–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {Achievement.query.count()}")
        except Exception as e:
            db.session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            return False
        
        return True

if __name__ == "__main__":
    success = migrate_achievements()
    if success:
        print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("–¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
    else:
        print("\nüí• –ú–∏–≥—Ä–∞—Ü–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏.")
        sys.exit(1) 